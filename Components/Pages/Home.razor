<!-- Page directive indicating the URL for this Razor component -->
@page "/"

<!-- Importing necessary namespaces -->
@using FitnessPortal.Data.Entities
@using FitnessPortal.Data.DTOs
@using FitnessPortal.Services
@using FitnessPortal.Authentication
@using FitnessPortal.Utils
<!-- Dependency injection of services using MudBlazor -->
@inject IFoodService FoodService
@inject IFoodJournalService FoodJournalService
@inject ISnackbar SnackBar
@inject IUserAccountService UserAccountService

<!-- Setting the page title -->
<PageTitle>Home</PageTitle>
<!-- AuthorizeView checks the authentication status of the user -->
<AuthorizeView Context="AuthContext">
	<!-- Display content if the user is authorized -->
	<Authorized>
		<MudGrid Justify="Justify.Center">
			<MudItem md="6">
				<MudPaper>
					<!-- EditForm for entering food details -->
					<EditForm Model="@foodDTO" OnValidSubmit="SubmitFoodEntry">
						<MudContainer>
							<MudCard>
								<MudCardContent>
									<!-- MudBlazor Autocomplete for food selection -->
									<MudAutocomplete T="FoodNutrition" Label="Enter food" @bind-Value="foodDTO.Food" SearchFunc="@FoodService.GetFoodNutrition"
													 ToStringFunc="@(x => x == null ? null : x.Name)" Required="true" />
									<!-- MudBlazor DatePicker for selecting the date -->
									<MudDatePicker Label="Date" @bind-Date="foodDTO.Date" Required="true" />
									<!-- MudBlazor NumericField for entering the quantity -->
									<MudNumericField @bind-Value="foodDTO.Quantity" Label="Quantity (g)" Min="1" Max="1500" Required="true" Step="25" />
								</MudCardContent>
								<MudCardActions>
									<!-- MudBlazor Button to submit the form -->
									<MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">
										@SubmitButtonText
									</MudButton>
									<!-- MudBlazor Button to reset the form if editing MudBlazor Datagrid entry -->
									@if (foodDTO.ID != Guid.Empty)
									{
										<MudButton class="ml-auto" Variant="Variant.Filled" Color="Color.Warning" ButtonType="ButtonType.Button" OnClick="ResetForm">Reset</MudButton>
									}
								</MudCardActions>
							</MudCard>
						</MudContainer>
					</EditForm>
					<MudDivider></MudDivider>
					<MudText Align="Align.Center" Typo="Typo.h6">Today's kcal consumption</MudText>
					<!-- MudBlazor PieChart for displaying daily kcal usage of the currently logged in user-->
					<MudChart ChartType="ChartType.Pie" InputData="@pieChartData"
							  InputLabels="@pieLabels" Width="60%" Height="60%" ChartOptions="@pieChartOptions" />
					<MudText Align="Align.Center" Typo="Typo.h6" Color="@kcalTextColor">@Math.Round(kcalConsumed) / @Math.Round(kcalGoal)</MudText>
						<!-- MudBlazor Card displaying BMI -->
						<MudCard>
							<MudCardContent>
								<MudChip Color="Color.Secondary">Current BMI: @Math.Round(bmi, 2)</MudChip>
							</MudCardContent>
						</MudCard>
					</MudPaper>
				</MudItem>
				<MudItem md="6">
					<MudPaper class="px-2">
						<MudDatePicker Label="Start Date" Date="@start" DateChanged="OnUpdateStartDate" />
						<MudDatePicker Label="End Date" Date="@end" DateChanged="OnUpdateEndDate" />
						<!-- MudBlazor DataGrid for displaying a list of food entries in the date interval selected through the MudDatePickers -->
						<MudDataGrid Items="@foodDTOEntryList">
							<Columns>
								<PropertyColumn Property="x => x.DateString" Title="Day" />
								<PropertyColumn Property="x => x.FoodName" Title="Name" />
								<PropertyColumn Property="x => Math.Round(x.KcalTotal, 2)" Title="Kcal" />
								<!-- TemplateColumn for custom cell template (Edit button) -->
								<TemplateColumn Sortable="false">
									<CellTemplate>
										<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => foodDTO = @context.Item)" />
									</CellTemplate>
								</TemplateColumn>
								<!-- TemplateColumn for custom cell template (Delete button) -->
								<TemplateColumn Sortable="false">
									<CellTemplate>
										<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete"
													   OnClick="@(() => RemoveTableEntry(@context.Item))" />
									</CellTemplate>
								</TemplateColumn>
							</Columns>
							<PagerContent>
								<MudDataGridPager T="FoodDTO" />
							</PagerContent>
						</MudDataGrid>
					</MudPaper>
				</MudItem>
			</MudGrid>
			<MudGrid Justify="Justify.Center">
				<MudItem md="12">
					<MudPaper Class="px-2">
						<!-- MudBlazor Select for choosing the LineChart period -->
						<MudSelect Class="pb-5"
								   Label="Period" Value="@chartPeriod" T="Enums.ChartPeriodOptions" AnchorOrigin="Origin.BottomCenter"
								   OpenIcon="@Icons.Material.Filled.CalendarMonth" ValueChanged="OnChartPeriodChange">
							@foreach (Enums.ChartPeriodOptions item in Enum.GetValues(typeof(Enums.ChartPeriodOptions)))
						{
							<MudSelectItem Value="@item">@item</MudSelectItem>
						}
					</MudSelect>
					<!-- MudBlazor Chart for displaying a line chart corresponding to the total Kcal intake during the chosen period, per days-->
					<MudChart Class="px-2" ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="50vh"></MudChart>
				</MudPaper>
			</MudItem>
		</MudGrid>
	</Authorized>
	<!-- Display content if the user is not authorized -->
	<NotAuthorized>
		<p>You're not authorized.</p>
	</NotAuthorized>
	<!-- Display content while authorization is in progress -->
	<Authorizing>
		<p>Authorizing</p>
	</Authorizing>
</AuthorizeView>

<style>
	.mud-chart-line {
		overflow: visible;
	}
</style>

@code {
	// Cascading parameter for authentication state
	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }
	// User ID for the current session
	private Guid SessionUserID = Guid.Empty;

	// Enumeration for chart period selection
	public Enums.ChartPeriodOptions chartPeriod { get; set; } = Enums.ChartPeriodOptions.ThisWeek;

	// List for chart series data for the LineChart
	public List<ChartSeries> Series = new List<ChartSeries>()
	{
		new ChartSeries() { Name = "Placeholder", Data = new double[] { } },
	};
	string[] pieChartPallete = new[]
		{
			"#94a6a8", // Original color
			"#1e90ff", // Dodger Blue
			"#ff4500", // Orange Red
			"#32cd32", // Lime Green
			"#ff69b4", // Hot Pink
			"#ffd700", // Gold
			"#8a2be2", // Blue Violet
			"#00ff7f", // Spring Green
			"#ff8c00", // Dark Orange
			"#9932cc"  // Dark Orchid
	};

	ChartOptions pieChartOptions = new();

	// Array for X-axis labels in the LineChart
	public string[] XAxisLabels = new string[] { "Placeholder" };

	// Array for PieChart data
	double[] pieChartData = { 0 };

	// Array for PieChart labels
	string[] pieLabels = { "null" };

	// Daily kcal goal
	double kcalGoal = 2000;

	// Total kcal consumed in a day
	double kcalConsumed = 0;

	// Body Mass Index (BMI)
	double bmi = 0;

	// Data transfer object for food entries
	FoodDTO foodDTO = new();

	// Start and end dates for the selected period
	DateTime? start = new DateTime(DateTime.Today.Year, DateTime.Today.Month, DateTime.Today.Day);
	DateTime? end = new DateTime(DateTime.Today.Year, DateTime.Today.Month, DateTime.Today.Day);

	// List to store food entry data for the selected period
	List<FoodDTO> foodDTOEntryList = new();

	// Color for displaying kcal consumption status
	private Color kcalTextColor = Color.Default;

	public string SubmitButtonText => foodDTO.ID == Guid.Empty ? "Submit to journal" : "Save to journal";

	/// <summary>
	/// Invoked when the component is initialized asynchronously.
	/// </summary>
	/// <returns>A <see cref="Task"/> representing the asynchronous operation.</returns>
	protected override async Task OnInitializedAsync()
	{
		if (authenticationState is not null)
		{
			var authState = await authenticationState;
			var user = authState?.User;

			if (user?.Identity is not null && user.Identity.IsAuthenticated)
			{
				// Parse the user ID from claims
				foodDTO.UserID = Guid.Parse(user.Claims.ElementAt(2).Value);
				SessionUserID = foodDTO.UserID;

				// Retrieve user details, including kcal goal and BMI
				var userWithDetails = await UserAccountService.GetUserDetails(foodDTO.UserID);
				
				kcalGoal = userWithDetails?.UserDetails.KCalGoal ?? 0;
				bmi = userWithDetails?.UserDetails.BMI ?? 0;

				// Update the page content
				UpdatePage();
			}
		}
	}

	/// <summary>
	/// Method to submit a new food entry
	/// </summary>
	private void SubmitFoodEntry()
	{
		if (foodDTO.Food.Name == null)
		{
			// Display an error message if no food type is chosen
			SnackBar.Add("No food type chosen!", Severity.Error);
			return;
		}

		// Add or update the food entry in the journal
		FoodJournalService.AddOrUpdateFoodJournalEntry(foodDTO);

		// Update the page content
		UpdatePage();
	}

	/// <summary>
	/// Method to update the entire page content
	/// </summary>
	private void UpdatePage()
	{
		UpdateFoodJournalTableData();
		UpdateTodayPieChart();
		UpdateLineChart();
	}

	/// <summary>
	/// Updates the start date of the selected period and triggers the update of the food journal table data.
	/// </summary>
	/// <param name="newDate">The new start date.</param>
	private void OnUpdateStartDate(DateTime? newDate)
	{
		start = newDate;
		UpdateFoodJournalTableData();
	}
	// Method called when the end date of the selected period is updated
	/// <summary>
	/// Updates the end date of the selected period and triggers the update of the food journal table data.
	/// </summary>
	/// <param name="newDate">The new end date.</param>
	private void OnUpdateEndDate(DateTime? newDate)
	{
		end = newDate;
		UpdateFoodJournalTableData();
	}

	/// <summary>
	/// Updates the food journal table data based on the selected period.
	/// </summary>
	private void UpdateFoodJournalTableData()
	{
		foodDTOEntryList = FoodJournalService.GetFoodJournals(start ?? DateTime.Today, end ?? DateTime.Today, SessionUserID);
	}

	/// <summary>
	/// Method to update the PieChart displaying today's kcal consumption
	/// </summary>
	private void UpdateTodayPieChart()
	{
		var tupleList = FoodJournalService.GetTodayFoodJournalByCategoriesAndKcal(SessionUserID);
		kcalConsumed = tupleList.Sum(x => x.Item2);
		var kcalLeft = kcalGoal - kcalConsumed;
		int newSize = tupleList.Count;

		if (kcalLeft > 0)
		{
			newSize++;
			pieChartOptions.ChartPalette = pieChartPallete;
		}
		else
		{
			pieChartOptions.ChartPalette = pieChartPallete.Skip(1).ToArray();
		}

		var newData = new double[newSize];
		var newLabel = new string[newSize];

		if (tupleList.Count < newSize)
		{
			newLabel[0] = "Kcal left";
			newData[0] = (double)kcalLeft;
			kcalTextColor = Color.Default;
		}
		else
		{
			kcalTextColor = Color.Warning;
		}

		for (int i = 0; i < tupleList.Count; i++)
		{
			var arrIndex = kcalLeft > 0 ? i + 1 : i;
			newLabel[arrIndex] = Enums.GetFoodCategoryString(tupleList.ElementAt(i).Item1);
			newData[arrIndex] = (double)tupleList.ElementAt(i).Item2;
		}

		pieChartData = newData;
		pieLabels = newLabel;

		// Trigger a state change to update the UI
		StateHasChanged();
	}

	/// <summary>
	/// Method to reset the form for entering food data
	/// </summary>
	private void ResetForm()
	{
		foodDTO = new();
		foodDTO.UserID = SessionUserID;
	}

	/// <summary>
	/// Removes a table entry from the food journal and updates the page content.
	/// </summary>
	/// <param name="foodDTOToRemove">The food DTO entry to be removed.</param>
	private void RemoveTableEntry(FoodDTO foodDTOToRemove)
	{
		FoodJournalService.RemoveFoodJournalEntry(foodDTOToRemove);

		// Reset the form if the removed entry is currently displayed
		if (this.foodDTO.ID.Equals(foodDTOToRemove.ID))
		{
			ResetForm();
		}

		// Update the page content
		UpdatePage();
	}
	/// <summary>
	/// Invoked when the chart period is changed
	/// </summary>
	/// <param name="chartPeriodOptions">the chartPeriod corresponding to the LineChart</param>
	private void OnChartPeriodChange(Enums.ChartPeriodOptions chartPeriodOptions)
	{
		chartPeriod = chartPeriodOptions;

		// Update the line chart based on the new period
		UpdateLineChart();
	}

	/// <summary>
	/// Method to update the line chart based on the selected period
	/// </summary>
	private void UpdateLineChart()
	{
		DateTime currentDate = DateTime.Now;
		DateTime startOfPeriod = DateTime.Today;
		DateTime endOfPeriod = DateTime.Today;
		int endIndex = 0;

		// Determine the start and end dates based on the selected period
		switch (chartPeriod)
		{
			case Enums.ChartPeriodOptions.ThisWeek:
				startOfPeriod = currentDate.AddDays(-(int)currentDate.DayOfWeek + (int)DayOfWeek.Monday);
				endOfPeriod = currentDate.AddDays(-(int)currentDate.DayOfWeek + (int)DayOfWeek.Sunday + 7);
				endIndex = 7;
				break;
			case Enums.ChartPeriodOptions.LastWeek:
				startOfPeriod = currentDate.AddDays(-(int)currentDate.DayOfWeek + (int)DayOfWeek.Monday - 7);
				endOfPeriod = currentDate.AddDays(-(int)currentDate.DayOfWeek + (int)DayOfWeek.Sunday);
				endIndex = 7;
				break;
			case Enums.ChartPeriodOptions.ThisMonth:
				startOfPeriod = new DateTime(currentDate.Year, currentDate.Month, 1);
				endOfPeriod = new DateTime(currentDate.Year, currentDate.Month, DateTime.DaysInMonth(currentDate.Year, currentDate.Month));
				endIndex = endOfPeriod.Day;
				break;
			case Enums.ChartPeriodOptions.LastMonth:
				startOfPeriod = new DateTime(currentDate.Year, currentDate.Month, 1).AddMonths(-1);
				endOfPeriod = new DateTime(currentDate.Year, currentDate.Month, 1).AddDays(-1);
				endIndex = endOfPeriod.Day;
				break;
			default: break;
		}

		startOfPeriod = startOfPeriod.Date;
		endOfPeriod = endOfPeriod.Date;
		var data = FoodJournalService.GetFoodJournals(startOfPeriod, endOfPeriod, SessionUserID);

		string[] newXAxisLabels;
		double[] newData;

		newXAxisLabels = new string[endIndex];
		newData = new double[endIndex];
		for (int i = 0; i < endIndex; i++)
		{
			// Display the XAxisLabels as days of the week if a week is chosen, otherwise month day
			newXAxisLabels[i] = endIndex == 7 ?
								i == 6 ?
								DayOfWeek.Sunday.ToString()
								: ((DayOfWeek)(i + 1)).ToString()
								: (i + 1).ToString();

			newData[i] = data.FindAll(x => x.Date == startOfPeriod.AddDays(i)).Sum(x => x.KcalTotal);
		}

		// Update the chart series and X-axis labels
		Series = new List<ChartSeries>()
		{
			new ChartSeries() {Name = "Kcal", Data = newData},
		};
		XAxisLabels = newXAxisLabels;
	}
}
