@page "/"
@using FitnessPortal.Data.Entities
@using FitnessPortal.Data.DTOs
@using FitnessPortal.Services
@using FitnessPortal.Authentication
@using FitnessPortal.Utils
@inject IFoodService FoodService
@inject IFoodJournalService FoodJournalService
@inject ISnackbar SnackBar
@inject IUserAccountService UserAccountService

@* @attribute [Authorize] *@

<PageTitle>Home</PageTitle>
<AuthorizeView Context="AuthContext">
	<Authorized>
		<MudGrid Justify="Justify.Center">
			<MudItem md="5">
				<MudPaper>
					<MudItem>
						<EditForm Model="@foodDTO" OnValidSubmit="SubmitFoodEntry">
							<MudContainer>
								<MudCard>
									<MudCardContent>
										<MudAutocomplete T="FoodNutrition" Label="Enter food" @bind-Value="foodDTO.Food" SearchFunc="@FoodService.GetFoodNutrition"
														 ToStringFunc="@(x => x == null ? null : x.Name)" Required="true" />
										<MudDatePicker Label="Date" @bind-Date="foodDTO.Date" Required="true" />
										<MudNumericField @bind-Value="foodDTO.Quantity" Label="Quantity (g)" Min="1" Max="1500" Required="true" Step="25" />
									</MudCardContent>
									<MudCardActions>
										<MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Submit to journal</MudButton>
										@if (foodDTO.ID != Guid.Empty)
										{
											<MudButton class="ml-auto" Variant="Variant.Filled" Color="Color.Warning" ButtonType="ButtonType.Button" OnClick="ResetForm">Reset</MudButton>
										}
									</MudCardActions>
								</MudCard>
							</MudContainer>
						</EditForm>
					</MudItem>
					<MudDivider></MudDivider>
					<MudItem>
						<MudText Align="Align.Center" Typo="Typo.h6">Today's kcal consumption</MudText>
						<MudChart ChartType="ChartType.Pie" InputData="@pieChartData" InputLabels="@labels" Width="60%" Height="60%" />
						<MudText Align="Align.Center" Typo="Typo.h6" Color="@kcalTextColor">@Math.Round(kcalConsumed) / @Math.Round(kcalGoal)</MudText>
						</MudItem>
					</MudPaper>
					<MudCard>
						<MudCardContent>
							<MudChip Color="Color.Secondary">Current BMI: @Math.Round(bmi, 2)</MudChip>
						</MudCardContent>
					</MudCard>
				</MudItem>
				<MudItem>
					<MudPaper class="px-2">
						<MudDatePicker Label="Start Date" Date="@start" DateChanged="OnUpdateStartDate" />
						<MudDatePicker Label="End Date" Date="@end" DateChanged="OnUpdateEndDate" />
						<MudDataGrid Items="@foodDTOEntryList">
							<Columns>
								<PropertyColumn Property="x => x.DateString" Title="Day" />
								<PropertyColumn Property="x => x.FoodName" Title="Name" />
								<PropertyColumn Property="x => Math.Round(x.KcalTotal, 2)" Title="Kcal" />
								<TemplateColumn Sortable="false">
									<CellTemplate>
										<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => foodDTO = @context.Item)" />
									</CellTemplate>
								</TemplateColumn>
								<TemplateColumn Sortable="false">
									<CellTemplate>
										<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete"
													   OnClick="@(() => RemoveTableEntry(@context.Item))" />
									</CellTemplate>
								</TemplateColumn>
							</Columns>
							<PagerContent>
								<MudDataGridPager T="FoodDTO" />
							</PagerContent>
						</MudDataGrid>
					</MudPaper>
				</MudItem>
				<MudItem>
					<MudPaper Class="px-2">
						<MudSelect Class="pb-5"
							Label="Period" Value="@chartPeriod" T="Enums.ChartPeriodOptions" AnchorOrigin="Origin.BottomCenter"
								   OpenIcon="@Icons.Material.Filled.CalendarMonth" ValueChanged="OnChartPeriodChange">
							@foreach (Enums.ChartPeriodOptions item in Enum.GetValues(typeof(Enums.ChartPeriodOptions)))
						{
							<MudSelectItem Value="@item">@item</MudSelectItem>
						}
					</MudSelect>
					<MudChart Class="px-2" ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="25em"></MudChart>
				</MudPaper>
			</MudItem>
		</MudGrid>
	</Authorized>
	<NotAuthorized>
		<p>You're not authorized.</p>
	</NotAuthorized>
	<Authorizing>
		<p>Authorizing</p>
	</Authorizing>
</AuthorizeView>

<style>
	.mud-chart-line {
		overflow: visible;
	}
</style>

@code {
	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }

	public Enums.ChartPeriodOptions chartPeriod { get; set; } = Enums.ChartPeriodOptions.ThisWeek;
	public List<ChartSeries> Series = new List<ChartSeries>()
	{
		new ChartSeries() { Name = "Placeholder", Data = new double[] { } },
	};
	public string[] XAxisLabels = new string[] { "Placeholder" };


	double[] pieChartData = { 0 };
	string[] labels = { "null" };
	double kcalGoal = 2000;
	double kcalConsumed = 0;
	double bmi = 0;

	FoodDTO foodDTO = new();
	DateTime? start = new DateTime(DateTime.Today.Year, DateTime.Today.Month, DateTime.Today.Day);
	DateTime? end = new DateTime(DateTime.Today.Year, DateTime.Today.Month, DateTime.Today.Day);
	List<FoodNutrition> foodList = new();
	List<FoodDTO> foodDTOEntryList = new();

	private Color kcalTextColor = Color.Default;
	private Guid SessionUserID = Guid.Empty;


	protected override async Task OnInitializedAsync()
	{
		if (authenticationState is not null)
		{
			var authState = await authenticationState;
			var user = authState?.User;

			if (user?.Identity is not null && user.Identity.IsAuthenticated)
			{
				foodDTO.UserID = Guid.Parse(user.Claims.ElementAt(2).Value);
				SessionUserID = foodDTO.UserID;
				var userWithDetails = await UserAccountService.GetUserDetails(new User
					{
						ID = foodDTO.UserID,
					});
				kcalGoal = userWithDetails.UserDetails.KCalGoal ?? 0;
				bmi = userWithDetails.UserDetails.BMI ?? 0;

				UpdatePage();
			}
		}
	}

	private void SubmitFoodEntry()
	{
		if (foodDTO.Food.Name == null)
		{
			SnackBar.Add("No food type chosen!", Severity.Error);
			return;
		}
		FoodJournalService.AddOrUpdateFoodJournalEntry(foodDTO);
		UpdatePage();
	}

	private void UpdatePage()
	{
		UpdateFoodJournalTableData();
		UpdateTodayPieChart();
		UpdateLineChart();
	}

	private void OnUpdateEndDate(DateTime? newDate)
	{
		end = newDate;
		UpdateFoodJournalTableData();
	}

	private void OnUpdateStartDate(DateTime? newDate)
	{
		start = newDate;
		UpdateFoodJournalTableData();
	}

	private void UpdateFoodJournalTableData()
	{
		foodDTOEntryList = FoodJournalService.GetFoodJournals(start ?? DateTime.Today, end ?? DateTime.Today,
		SessionUserID);
	}

	private void UpdateTodayPieChart()
	{
		var tupleList = FoodJournalService.GetTodayFoodJournalByCategoriesAndKcal(SessionUserID);
		kcalConsumed = tupleList.Sum(x => x.Item2);
		var kcalLeft = kcalGoal - kcalConsumed;
		int newSize = tupleList.Count;

		if (kcalLeft > 0)
		{
			newSize++;
		}

		var newData = new double[newSize];
		var newLabel = new string[newSize];
		for (int i = 0; i < tupleList.Count; i++)
		{
			newLabel[i] = Enums.GetFoodCategoryString(tupleList.ElementAt(i).Item1);
			newData[i] = (double)tupleList.ElementAt(i).Item2;
		}

		if (tupleList.Count < newSize)
		{
			newLabel[newSize - 1] = "Kcal left";
			newData[newSize - 1] = (double)kcalLeft;
			kcalTextColor = Color.Default;
		}
		else
		{
			kcalTextColor = Color.Warning;
		}



		pieChartData = newData;
		labels = newLabel;
		StateHasChanged();
	}

	private void ResetForm()
	{
		foodDTO = new();
		foodDTO.UserID = SessionUserID;
	}

	private void RemoveTableEntry(FoodDTO foodDTOToRemove)
	{
		FoodJournalService.RemoveFoodJournalEntry(foodDTOToRemove);
		if (this.foodDTO.ID.Equals(foodDTOToRemove.ID))
		{
			ResetForm();
		}
		UpdatePage();
	}
	private void OnChartPeriodChange(Enums.ChartPeriodOptions chartPeriodOptions)
	{
		chartPeriod = chartPeriodOptions;
		UpdateLineChart();
	}

	private void UpdateLineChart()
	{
		DateTime currentDate = DateTime.Now;

		DateTime startOfPeriod = DateTime.Today;
		DateTime endOfPeriod = DateTime.Today;
		int endIndex = 0;
		switch (chartPeriod)
		{
			case Enums.ChartPeriodOptions.ThisWeek:
				startOfPeriod = currentDate.AddDays(-(int)currentDate.DayOfWeek + (int)DayOfWeek.Monday);
				endOfPeriod = currentDate.AddDays(-(int)currentDate.DayOfWeek + (int)DayOfWeek.Sunday + 7);
				endIndex = 7;
				break;
			case Enums.ChartPeriodOptions.LastWeek:
				startOfPeriod = currentDate.AddDays(-(int)currentDate.DayOfWeek + (int)DayOfWeek.Monday - 7);
				endOfPeriod = currentDate.AddDays(-(int)currentDate.DayOfWeek + (int)DayOfWeek.Sunday);
				endIndex = 7;
				break;
			case Enums.ChartPeriodOptions.ThisMonth:
				startOfPeriod = new DateTime(currentDate.Year, currentDate.Month, 1);
				endOfPeriod = new DateTime(currentDate.Year, currentDate.Month, DateTime.DaysInMonth(currentDate.Year, currentDate.Month));
				endIndex = endOfPeriod.Day;
				break;
			case Enums.ChartPeriodOptions.LastMonth:
				startOfPeriod = new DateTime(currentDate.Year, currentDate.Month, 1).AddMonths(-1);
				endOfPeriod = new DateTime(currentDate.Year, currentDate.Month, 1).AddDays(-1);
				endIndex = endOfPeriod.Day;
				break;
			default: break;
		}
		startOfPeriod = startOfPeriod.Date;
		endOfPeriod = endOfPeriod.Date;
		var data = FoodJournalService.GetFoodJournals(startOfPeriod, endOfPeriod, SessionUserID);

		string[] newXAxisLabels;
		double[] newData;

		newXAxisLabels = new string[endIndex];
		newData = new double[endIndex];
		for (int i = 0; i < endIndex; i++)
		{
			newXAxisLabels[i] = endIndex == 7 ? 
					            i == 6 ? 
								DayOfWeek.Sunday.ToString() 
								: ((DayOfWeek)(i + 1)).ToString() 
								: (i + 1).ToString();
			
			newData[i] = data.FindAll(x => x.Date == startOfPeriod.AddDays(i)).Sum(x => x.KcalTotal);
		}

		Series = new List<ChartSeries>()
		{
			new ChartSeries() {Name = "Kcal", Data = newData},
		};
		XAxisLabels = newXAxisLabels;
	}
}
