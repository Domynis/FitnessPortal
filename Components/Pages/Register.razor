@page "/register"

@using FitnessPortal.Data.DTOs
@using FitnessPortal.Data.Entities
@using FitnessPortal.Authentication
@using FitnessPortal.Services
@using FitnessPortal.Utils

@inject IUserAccountService UserAccountService
@inject ISnackbar SnackBar

@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>

<EditForm Model="@model" OnValidSubmit="RegisterUser">
    <!-- MudBlazor Grid to center the registration card -->
    <MudGrid Class="justify-center">
        <MudItem md="5">
            <MudContainer>
                <!-- MudBlazor Card for the registration form -->
                <MudCard>
                    <MudCardHeader>
                        <!-- MudBlazor Text for the registration header -->
                        <MudText Typo="Typo.h2">Register</MudText>
                    </MudCardHeader>

                    <MudCardContent>
                        <!-- DataAnnotationsValidator for validating form data -->
                        <DataAnnotationsValidator />

                        <!-- MudBlazor TextField for entering the username -->
                        <MudTextField @bind-Value="model.UserName" Label="UserName" Required="true" />

                        <!-- MudBlazor TextField for entering the password -->
                        <MudTextField @bind-Value="model.Password" Label="Password" Required="true" InputType="InputType.Password" />

                        <!-- MudBlazor TextField for entering the first name -->
                        <MudTextField @bind-Value="model.FirstName" Label="FirstName" Required="true" />

                        <!-- MudBlazor TextField for entering the last name -->
                        <MudTextField @bind-Value="model.LastName" Label="LastName" Required="true" />

                        <!-- MudBlazor Select for choosing the gender -->
                        <MudSelect @bind-Value="model.Gender" Label="Gender">
                            <MudSelectItem Value="@("Male")" />
                            <MudSelectItem Value="@("Female")" />
                        </MudSelect>

                        <!-- MudBlazor NumericField for entering the age -->
                        <MudNumericField @bind-Value="model.Age" Label="Age" Min="0" Max="127" />

                        <!-- MudBlazor NumericField for entering the weight -->
                        <MudNumericField @bind-Value="model.Weight" Label="Weight (kg)" Min="0" Max="500" />

                        <!-- MudBlazor NumericField for entering the height -->
                        <MudNumericField @bind-Value="model.Height" Label="Height (cm)" Min="0" Max="300" />

                        <!-- MudBlazor NumericField for entering the KCal goal -->
                        <MudNumericField @bind-Value="model.KCalGoal" Label="KCal Goal" Min="0" />

                        <!-- MudBlazor Select for choosing the user role -->
                        <MudSelect @bind-Value="selectedRole" Label="Role" Required="true">
                            <MudSelectItem Value="@("User")" />
                            <MudSelectItem Value="@("Admin")" />
                        </MudSelect>
                    </MudCardContent>

                    <MudCardActions>
                        <!-- MudBlazor Button to submit the registration form -->
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="mx-auto">Register</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudContainer>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    // CascadingParameter for handling authentication state
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    // Initial role selected for the user
    private string selectedRole = "User";

    // UserDTO model for capturing registration data
    UserDTO model = new UserDTO();

    // Method called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        // Initialize user and user details IDs
        model.UserID = Guid.Empty;
        model.UserDetailsID = Guid.Empty;

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                // Retrieve user details if authenticated
                var ID = Guid.Parse(user.Claims.ElementAt(2).Value);
                model = UserAccountService.GetUserDTO(ID) ?? new();
                model.Password = String.Empty;
                selectedRole = model.Role == 1 ? "Admin" : "User";
            }
        }
    }

    // Method to register the user on form submission
    private void RegisterUser()
    {
        // Set the role based on the selected role
        model.Role = selectedRole.Equals("Admin") ? 1 : 0;

        // Add or update the user DTO
        UserAccountService.AddOrUpdateUserDTO(model);

        // Navigate to the login page after registration
        NavigationManager.NavigateTo("/login");
    }
}
