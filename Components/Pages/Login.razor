@page "/login"
@using FitnessPortal.Data.Entities
@using FitnessPortal.Authentication
@using FitnessPortal.Services
@using MudBlazor

@inject IUserAccountService UserAccountService
@inject ISnackbar SnackBar

@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>

<EditForm Model="@model" OnValidSubmit="Authenticate">
    <!-- MudBlazor Grid to center the login card -->
    <MudGrid Class="justify-center">
        <MudItem md="5">
            <MudContainer>
                <!-- MudBlazor Card for the login form -->
                <MudCard>
                    <MudCardHeader>
                        <!-- MudBlazor Text for the login header -->
                        <MudText Typo="Typo.h2">Login</MudText>
                    </MudCardHeader>

                    <MudCardContent>
                        <!-- DataAnnotationsValidator for validating form data -->
                        <DataAnnotationsValidator />

                        <!-- MudBlazor TextField for entering the username -->
                        <MudTextField @bind-Value="model.UserName" Label="Username" Required="true" />

                        <!-- MudBlazor TextField for entering the password -->
                        <MudTextField @bind-Value="model.Password" InputType="InputType.Password" Label="Password" Required="true" />
                    </MudCardContent>

                    <MudCardActions>
                        <!-- MudBlazor Button to navigate to the registration page -->
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" ButtonType="ButtonType.Button" Href="/register" StartIcon="@Icons.Material.Filled.AppRegistration">Register</MudButton>

                        <!-- MudBlazor Button to submit the login form -->
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="ml-auto">Login</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudContainer>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    // User model for capturing login data
    User model = new User();

    // EditContext for handling form validation
    private EditContext editContext;

    // Method called when the component is initialized
    protected override void OnInitialized()
    {
        editContext = new EditContext(model);
    }

    // Method to authenticate the user on form submission
    private async void Authenticate()
    {
        // Attempt to login using the provided credentials
        var account = await UserAccountService.Login(model);

        if (account == null)
        {
            // Display an error message if login fails
            SnackBar.Add("Invalid username or password", Severity.Error);
            return;
        }

        // Access the custom authentication state provider for user authentication
        var customAuthProvider = (CustomAuthenticationStateProvider)AuthStateProvider;

        // Authenticate the user and set the user session
        await customAuthProvider.AuthenticateUser(new UserSession
            {
                ID = account.ID,
                Name = account.UserName,
                Role = account.Role,
            });

        // Navigate to the home page upon successful login
        NavigationManager.NavigateTo("/", true);
    }
}
